import scala.io.Source

def triple(line: String): (String, String, String) = {
  val tokens = line.split(" ", 3)
  val subject = java.net.URLDecoder.decode(tokens(0).replace("<http://dbpedia.org/resource/", "")).replace(">", "")
  val predicate = tokens(1)
  var obj = tokens(2)

  (subject, predicate, obj)
}

val pages = scala.collection.mutable.Map[String, (Int, Int, Int)]()

Source.fromFile("/Users/lihb/data/dbpedia/long_abstracts_en.nt").getLines.foreach { line =>
  if (!line.startsWith("#")) {
    val nt = triple(line)
    if (!pages.contains(nt._1)) {
        pages(nt._1) = (pages.size, 0, 0)
      } else {
        println(s"""pages already contains $nt._1""")
    }
  }
}

val links = new smile.data.SparseDataset(pages.size)
Source.fromFile("/Users/lihb/data/dbpedia/page_links_en.nt").getLines.foreach { line =>
  if (!line.startsWith("#")) {
    val nt = triple(line)
    val source = nt._1
    val sink = java.net.URLDecoder.decode(nt._3.replace("<http://dbpedia.org/resource/", "")).replace("> .", "")
    if (pages.contains(source) && pages.contains(sink)) {
      val out = pages(source)
      val in = pages(sink)
      val j = out._1
      val i = in._1
      links.set(i, j, 1.0)
      pages(source) = out.copy(_2=(out._2+1))
      pages(sink) = in.copy(_3=(in._3+1))
    }
  }
}

links.foreach { case (page, stat) =>
  if (stat._2 == 0 || stat._3 == 0)
    println(page, stat)
}

val d = 0.85
val n = pages.size

0 until n foreach { j =>
  var l = 0
  0 until n foreach { i =>
    val x = links.get(i, j)
    if (x != 0) l = l + 1
  }

  if (l == 0) {
    println("sink page", j)
  }

  0 until n foreach { i =>
    if (l > 0) {
      if (i == j) {
        links.set(i, i, (1.0 - d) / n)
      } else {
        val x = links.get(i, j)
        if (x != 0) links.set(i, j, d / l)
      }
    } else {
      links.set(i, j, 1.0 / n)
    }
  }
}

val matrix = links.toSparseMatrix
val eigenvector = Array.fill[Double](pages.size)(1.0 / pages.size)
val eigenvalue = smile.math.matrix.EigenValueDecomption(matrix, eigenvector, 0.0, 1.0E-8, 50)
println(eigenvalue)
val pr = smile.math.Math.unitize1(eigenvector)

val server = CassandraServer("127.0.0.1", 9160)
val table = server.dataset("dbpedia")

val rank = Document("unicorn.text.corpus.text.page_rank", "text_index")
var batch = 0
pages.foreach { case (page, stat) =>
  rank(page) = eigenvalue(stat._1)
  //batch = batch + 1
  //if (batch % 10000) rank into table
}
//rank into table
